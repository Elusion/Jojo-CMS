<?php
/**
 *                    Jojo CMS
 *                ================
 *
 * Copyright 2007-2008 Harvey Kane <code@ragepank.com>
 * Copyright 2007-2008 Michael Holt <code@gardyneholt.co.nz>
 * Copyright 2007 Melanie Schulz <mel@gardyneholt.co.nz>
 *
 * See the enclosed file license.txt for license information (LGPL). If you
 * did not receive this file, see http://www.fsf.org/copyleft/lgpl.html.
 *
 * @author  Harvey Kane <code@ragepank.com>
 * @author  Michael Cochrane <mikec@jojocms.org>
 * @author  Melanie Schulz <mel@gardyneholt.co.nz>
 * @license http://www.fsf.org/copyleft/lgpl.html GNU Lesser General Public License
 * @link    http://www.jojocms.org JojoCMS
 * @package jojo_sitemap
 */

class Jojo_Plugin_Jojo_sitemap extends Jojo_Plugin
{
    function _getContent()
    {
        global $smarty, $_USERGROUPS;

        /*
          The $sitemap array holds all the various different sitemap trees.
            'title'  - the title of the sitemap section eg Pages, Articles, Forums etc.
            'tree'   - the tree array generated by the plugin.
            'header' - any HTML to go above the tree.
            'footer' - any HTML to go below the tree.
            'order'  - the importance or order of the sitemap section. 0 appears first, 10 last.
        */
        $sitemap = array();

        /* Apply filter to allow other plugins to alter the sitemap */
        $sitemap = Jojo::applyFilter('jojo_sitemap', $sitemap);

        /* Sort the sitemap */
        usort($sitemap, array('Jojo_Plugin_Jojo_sitemap', '_sortSitemap'));

        /* Convert array tree into html */
        foreach($sitemap as $k => $v) {
            $sitemap[$k]['htmlTree'] = Jojo_Plugin_Jojo_sitemap::_htmlSitemap($v['tree']);
        }

        /* hide the sitemap headings whenh there are only pages, no plugins */
        $sitemap_show_headings = count($sitemap)  > 1 ? true : false;
        $smarty->assign('sitemap_show_headings', $sitemap_show_headings);

        /* Assign the sitemap to smarty */
        $smarty->assign('sitemap', $sitemap);

        /* Return the content */
        $content = array();
        $content['content'] = $smarty->fetch('jojo_sitemap.tpl');
        return $content;
    }

    /**
     * Recursively convert the sitemay array to html
     */
    static function _htmlSitemap($tree)
    {
        if (!is_array($tree) || !count($tree)) {
            return '';
        }

        $html = '<ul>';
        foreach ($tree as $t) {
            $html .= "<li>" . ($t['url']!='' ? '<a href="' . $t['url'] . '">' . $t['name'] . '</a>' : $t['name'] ) . Jojo_Plugin_Jojo_sitemap::_htmlSitemap(isset($t['children']) ? $t['children'] : array()) . "</li>\n";
        }
        $html .= '</ul>';
        return $html;
    }

    /**
     * Sort the sitemap based on the order field
     */
    static function _sortSitemap($a, $b) {
        if ($a['order'] == $b['order']) {
            return 0;
        }
        return ($a['order'] < $b['order']) ? -1 : 1;
    }

    /**
     * Filter for robots.txt rules
     */
    public static function robots($rules) {
        return $rules . 'Sitemap: ' . _SITEURL . "/sitemap.xml\n";
    }


    static function _sitemapAddInplace($sitemap, $toadd, $url)
    {
        foreach ($sitemap as $k => $t) {
            if ($t['url'] == $url) {
                $sitemap[$k]['children'] = isset($sitemap[$k]['children']) ? array_merge($toadd, $sitemap[$k]['children']): $toadd;
            } elseif (isset($sitemap[$k]['children'])) {
                $sitemap[$k]['children'] = self::_sitemapAddInplace($t['children'], $toadd, $url);
            }
        }
        return $sitemap;
    }

    static function _sitemapRemoveSelf($tree, $indexpages=array())
    {
        static $urls;
        if (!is_array($urls)) {
            $urls = array();
            if (count($indexes)==0) {
               return $tree;
            }
            foreach($indexes as $key => $i){
                $urls[] = $i['url'];
            }
        }
        foreach ($tree as $k =>$t) {
            if (in_array($t['url'], $urls)) {
                unset($tree[$k]);
            } else {
                $tree[$k]['children'] = self::_sitemapRemoveSelf($t['children']);
            }
        }
        return $tree;
    }
}